name: Reusable Build and Deploy
on:
  workflow_call:
    inputs:
      service_dir:
        required: true
        type: string
      # 任意で上書き可
      ecr_repo:
        required: false
        type: string
      # 互換性維持: 指定されたらその下のfunction.jsonnetを使う
      lambroll_dir:
        required: false
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true
      # lambroll用の追加シークレットがあればここに
      EDL_SECRET_ID:
        required: false

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: fujiwara/lambroll@v1
        with: { version: v1.1.0 }

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Derive names (ECR repo & lambroll function)
        id: derive
        shell: bash
        run: |
          SVC="${{ inputs.service_dir }}"                       # e.g., services/earthdata-asset-resolver
          NAME="$(basename "$SVC")"                             # -> earthdata-asset-resolver
          SAFE_NAME="$(echo "$NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9/_-]+/-/g')"

          # ECRの命名要件：先頭は英字、小文字/数字/ハイフン/アンダースコア/スラッシュのみ
          if ! echo "$SAFE_NAME" | grep -Eq '^[a-z][a-z0-9/_-]*$'; then
            echo "::error ::Invalid ECR repo name derived from service dir: $SAFE_NAME"
            exit 1
          fi

          ECR_REPO="${{ inputs.ecr_repo }}"
          [ -z "$ECR_REPO" ] && ECR_REPO="$SAFE_NAME"

          # lambrollのfunction.jsonnet（引数で渡す）
          if [ -n "${{ inputs.lambroll_dir }}" ]; then
            FUNC="${{ inputs.lambroll_dir }}/function.jsonnet"
          else
            FUNC="infra/lambroll/$SAFE_NAME/function.jsonnet"
          fi

          echo "ecr_repo=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "lambroll_function=$FUNC" >> $GITHUB_OUTPUT

      - name: Validate definitions
        shell: bash
        run: |
          test -f "${{ steps.derive.outputs.lambroll_function }}" \
            || { echo "::error ::function.jsonnet not found: ${{ steps.derive.outputs.lambroll_function }}"; exit 1; }
          # Terraformで事前作成されていることを前提に存在チェックのみ（作成はしない）
          aws ecr describe-repositories --repository-names "${{ steps.derive.outputs.ecr_repo }}" >/dev/null 2>&1 \
            || { echo "::error ::ECR repository '${{ steps.derive.outputs.ecr_repo }}' not found. Ensure Terraform applied."; exit 1; }

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ECR
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.service_dir }}
          file: ./${{ inputs.service_dir }}/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ steps.derive.outputs.ecr_repo }}:sha-${{ github.sha }}
          provenance: false

      - name: Compose IMAGE_URI with digest
        run: |
          REG="${{ steps.login-ecr.outputs.registry }}"
          REPO="${{ steps.derive.outputs.ecr_repo }}"
          DIGEST="${{ steps.build-push.outputs.digest }}"
          echo "IMAGE_URI=${REG}/${REPO}@${DIGEST}" >> $GITHUB_ENV
          echo "Image: ${REG}/${REPO}@${DIGEST}"

      - name: Deploy Lambda via lambroll (function.jsonnet as arg)
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
          EDL_SECRET_ID: ${{ secrets.EDL_SECRET_ID }}
        run: |
          lambroll deploy --function "${{ steps.derive.outputs.lambroll_function }}"
