name: Reusable Build and Deploy
on:
  workflow_call:
    inputs:
      service_dir:
        required: true
        type: string
      # もし明示したい場合に限り上書きできるよう optional に
      ecr_repo:
        required: false
        type: string
      lambroll_dir:
        required: false
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: fujiwara/lambroll@v1
        with: { version: v1.1.0 }

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Derive names (when not given)
        id: derive
        shell: bash
        run: |
          SVC="${{ inputs.service_dir }}"           # e.g., services/earthdata-asset-resolver
          NAME="$(basename "$SVC" | tr '[:upper:]' '[:lower:]')"   # 念のため小文字化
          # 英数字と . _ - 以外は - に置換（安全側）
          SAFE_NAME="$(echo "$NAME" | sed -E 's/[^a-z0-9._-]+/-/g')"
          ECR_REPO="${{ inputs.ecr_repo }}"
          LAMBROLL_DIR="${{ inputs.lambroll_dir }}"
          [ -z "$ECR_REPO" ] && ECR_REPO="earthdata-${SAFE_NAME}"
          [ -z "$LAMBROLL_DIR" ] && LAMBROLL_DIR="${SVC}/infra/lambroll"
          echo "ecr_repo=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "lambroll_dir=$LAMBROLL_DIR" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ECR
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.service_dir }}
          file: ./${{ inputs.service_dir }}/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ steps.derive.outputs.ecr_repo }}:sha-${{ github.sha }}
          provenance: false

      - name: Compose IMAGE_URI with digest
        run: |
          REG="${{ steps.login-ecr.outputs.registry }}"
          REPO="${{ steps.derive.outputs.ecr_repo }}"
          DIGEST="${{ steps.build-push.outputs.digest }}"
          echo "IMAGE_URI=${REG}/${REPO}@${DIGEST}" >> $GITHUB_ENV
          echo "Image: ${REG}/${REPO}@${DIGEST}"

      - name: Deploy Lambda via lambroll
        if: ${{ hashFiles(format('{0}/function.json', steps.derive.outputs.lambroll_dir)) != '' }}
        working-directory: ${{ steps.derive.outputs.lambroll_dir }}
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
          EDL_SECRET_ID: ${{ secrets.EDL_SECRET_ID }}
        run: lambroll deploy
