name: Build & Deploy Earthdata Resolver

on:
  push:
    paths:
      - 'services/**'
      - 'infra/lambroll/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  id-token: write   # OIDCで必要
  contents: read

env:
  AWS_REGION: us-west-2
  ECR_REPO: earthdata-asset-resolver

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # lambroll (v1系)
      - uses: fujiwara/lambroll@v1
        with:
          version: v1.1.0

      # GitHub OIDC でAWS認証
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # ECRログイン
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Buildx を使ってビルド
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Build & Push (ECR)
      - name: Build & Push to ECR
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: ./services/earthdata-asset-resolver
          file: ./services/earthdata-asset-resolver/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:sha-${{ github.sha }}
          # Lambda/ECR での相性トラブルを避けるため provenanceは無効
          provenance: false

      # digest から完全な Image URI を生成（@sha256:... 形式）
      - name: Compose IMAGE_URI with digest
        run: |
          REG="${{ steps.login-ecr.outputs.registry }}"
          REPO="${{ env.ECR_REPO }}"
          DIGEST="${{ steps.build-push.outputs.digest }}"
          echo "IMAGE_URI=${REG}/${REPO}@${DIGEST}" >> $GITHUB_ENV
          echo "Image: ${REG}/${REPO}@${DIGEST}"

      # lambroll deploy（function.json の Code.ImageUri は envテンプレで差し込み）
      - name: Deploy Lambda via lambroll
        working-directory: infra/lambroll
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
          EDL_SECRET_ID : ${{ secrets.EDL_SECRET_ID }}
        run: |
          lambroll deploy
